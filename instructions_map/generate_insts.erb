#ifndef MODULE
    #define MODULE "Hart"
    #include "logging.h"
#endif
#include <cstdint>
#include <map>
#include <bitset>
#include <memory>
#include <array>
#include <iostream>
#include <string>

#ifndef GEN_INSTS_H
#define GEN_INSTS_H

namespace Machine
{
<%
  instruction_set = InstructionSet.new(InstructionSet::YAML_PATH)
  print "yaml path in rb: #{InstructionSet::YAML_PATH}", "\n"
  instruction_set.instruction_definitions.each do |format, instructions|
  format_args = instruction_set.get_args(format)
  instructions.each do |instruction_name, details|
%>

<%
    code = instruction_set.get_code(format, instruction_name, details)
%>

void <%= instruction_name %>(Hart &hart, Instr *inst) {
  <%= code.gsub('|bbPTR|', '') %>
#ifdef PLUGIN_ENABLED
  auto handl = hart.GetHandlers()["<%= instruction_name %>"];
  if(handl != nullptr)
  {
      handl(&hart, nullptr, inst);
  }
#endif
}
<% end %>
<% end %>

void ExecuteLinearBlock(Hart &hart, LinearBlock *instBlock) {
  static void *instrMarks[] = {
<% size = 0 %>
<% instruction_set.instruction_definitions.each do |format, instructions|  %>
  <% instructions.each do |instruction_name, details| %>
    &&<%= instruction_name %>, //<%= size %>
  <% size += 1 %>
  <% end %>
<% end %>
    &&RETURN
  };
  uWord blockPC = 0;
  auto inst = instBlock->instr(blockPC);
  uint64_t mark = inst->mark;
  goto *instrMarks[mark];
<% instruction_set.instruction_definitions.each do |format, instructions|  %>
  <% instructions.each do |instruction_name, details| %>
    <%= instruction_name %>:
    Log(LogLevel::DEBUG, (std::stringstream() << std::hex << "Execute PC: 0x" << hart.getPC()).str());
    Log(LogLevel::DEBUG, std::string("Execute Instr: ") + "<%= instruction_name %>");
    {
    <%
        code = instruction_set.get_code(format, instruction_name, details)
    %>
    <%= code.gsub('|bbPTR|', ', instBlock') %>
#ifdef PLUGIN_ENABLED
        auto handl = hart.GetHandlers()["<%= instruction_name %>"];
        if(handl != nullptr)
        {
            handl(&hart, nullptr, inst);
        }
#endif
    }
    hart.setPC(hart.getPC() + sizeof(Word));
    blockPC++;
    inst = instBlock->instr(blockPC);
    mark = inst->mark;
    goto *instrMarks[mark];
  <% end %>
<% end %>
  RETURN:
  return;
}

constexpr int32_t SIZE_OF_INSTRS = <%= size %>;

bool checkBBEndInstr(uWord opcodeFns) {
  switch(opcodeFns) {
  <% instruction_set.instruction_definitions.each do |format, instructions|  %>
  <% instructions.each do |instruction_name, details| %>
    <%= if details.key?("BBend") then "case #{instruction_set.create_instruction_key(details)}:\n
    return false;" end %>
  <% end %>
<% end %>
    default:
      return true;
  }
}

std::map<uWord, uWord> instructionMarkMap = {
  <% index = 0 %>
  <% instruction_set.instruction_definitions.each do |format, instructions|  %>
    <% instructions.each do |instruction_name, details| %>
      {<%= instruction_set.create_instruction_key(details) %>, <%= index %>}, //<%= instruction_name %>
    <% index += 1 %>
    <% end %>
  <% end %>
};

// Map for logging : key - opcode+fn, value - instr name
std::map<int, std::string> logMap = {
<%=instruction_set.gen_log_map %>
};

// instructionMap: opcode + fn - ключ, значение - указатель на функцию-обработчик инструкции
using InstructionHandler = void(*)(Hart&, Instr *);
std::map<uWord, InstructionHandler> instructionMap = {
<%= instruction_set.generate_map %>
};

int32_t getImmInvalid (int32_t instCode) {
  return 0;
}

constexpr uWord maskI = 0b111111111111 << 20;
constexpr uWord signExt11 = 0b000111111111111111111111 << 11;

int32_t getImmI (int32_t instCode) {
  return signExt11 + ((((instCode & maskI) >> 20) + (1 << 11)) & static_cast<int32_t>(0b111111111111U));
}

constexpr uWord maskS1 = 0b00011111 << 7;
constexpr uWord maskS2 = 0b01111111 << 25;

int32_t getImmS (int32_t instCode) {
  return signExt11 + (((((instCode & maskS1) >> 7) + ((instCode & maskS2) >> 20)) + (1 << 11)) & static_cast<int32_t>(0b111111111111U));
}

constexpr uWord maskB1 = 1 << 7;
constexpr uWord maskB2 = 0b1111 << 8;
constexpr uWord maskB3 = 0b00111111 << 25;
constexpr uWord maskB4 = 1 << 31;

constexpr uWord signExt12 = 0b11111111111111111111 << 12;

int32_t getImmB (int32_t instCode) {
  return signExt12 + (((((instCode & maskB1) << 4) + ((instCode & maskB2) >> 7) +
  ((instCode & maskB3) >> 20) + ((instCode & maskB4) >> 19)) + (1 << 12)) & static_cast<int32_t>(0b0001111111111111U));
}

constexpr uWord maskU = 0b11111111111111111111 << 12U;

int32_t getImmU (int32_t instCode) {
  return (instCode & maskU) >> 12U;
}

constexpr uWord maskJ1 = 0b11111111 << 12;
constexpr uWord maskJ2 = 1 << 20;
constexpr uWord maskJ3 = 0b1111111111 << 21;
constexpr uWord maskJ4 = 1 << 31;
constexpr uWord signExt20 = ((1 << 12) - 1) << 20;

int32_t getImmJ (int32_t instCode) {
  return (signExt20 + ((((instCode & maskJ1) + ((instCode & maskJ2) >> 9) +
  ((instCode & maskJ3) >> 20) + ((instCode & maskJ4) >> 11)) + (1 << 20)) & static_cast<int32_t>(0b111111111111111111111)));
}

<%decode_map = generate_decode_map%>
<%
  cpp_code = <<~CPP
    std::pair<std::array<int32_t, 7>, int32_t(*)(int32_t)> decodeMap[127] = {
  CPP

  decode_map.each do |pair|
    mask_array, get_imm_func = pair
    cpp_code << "{{"
    cpp_code << mask_array.map { |item| "static_cast<int32_t>(#{item.to_s}U)" }.join(",")
    cpp_code << "}, "
    cpp_code << (get_imm_func.nil? ? "getImmInvalid" : get_imm_func.to_s)
    cpp_code << "},\n"
  end
  cpp_code << "};"
%>
<%= cpp_code %>

#ifdef PLUGIN_ENABLED
void InitInstrPluginHandlers(Hart &hart, void *pluginHandler)
{
  <% instruction_set.instruction_definitions.each do |format, instructions|  %>
  <% instructions.each do |instruction_name, details| %>
    hart.GetHandlers()["<%= instruction_name %>"] = reinterpret_cast<PluginMethodHandler>(hart.FindHandler(pluginHandler, "<%= instruction_name %>"));
  <% end %>
  <% end %>
}

#endif

}

#endif