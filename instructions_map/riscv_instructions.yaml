formats:
  R:
    rd: [7, 11]
    rs1: [15, 19]
    rs2: [20, 24]
    opcode: [0, 6]
    f3: [12, 14]
    f7: [25, 31]

  I:
    rd: [7, 11]
    rs1: [15, 19]
    imm: [20, 31]
    opcode: [0, 6]
    f3: [12, 14]
    shamt: [26, 31]

  S:
    imm_1: [7, 11]
    imm_2: [25, 31]
    rs1: [15, 19]
    rs2: [20, 24]
    opcode: [0, 6]
    f3: [12, 14]

  U:
    rd: [7, 11]
    imm: [12, 31]
    opcode: [0, 6]

  B:
    rs1: [15, 19]
    rs2: [20, 24]
    opcode: [0, 6]
    f3: [12, 14]

  J:
    opcode: [0, 6]
    rd: [7, 11]
    imm: [12, 31]

  M:
    opcode: [0, 6]
    rd: [7, 11]
    f3: [12, 14]
    rs1: [15, 19]
    rs2: [20, 24]
    f7: [25, 31]

  SYSTEM:
    opcode: [0, 6]
    rd: [7, 11]
    f3: [12, 14]
    rs1: [15, 19]
    f12: [20, 31]

instructions:
  LUI:
    format: U
    opcode: 55
    operator:
    log: load upper immediate

  AUIPC:
    format: U
    opcode: 23
    operator: "hart.getPC() + "
    log: add upper immediate to pc

  ADDI:
    format: I
    opcode: 19
    f3: 0
    operator: '+'
    log: add immediate

  SLTI:
    format: I
    opcode: 19
    f3: 2
    operator: '<'
    afterop: '? 1 : 0'
    log: set less than immediate

  SLTIU:
    format: I
    opcode: 19
    f3: 3
    operator: '<'
    afterop: '? 1 : 0'
    type: uint64_t

  XORI:
    format: I
    opcode: 19
    f3: 4
    operator: '^'

  ORI:
    format: I
    opcode: 19
    f3: 6
    operator: '|'

  ANDI:
    format: I
    opcode: 19
    f3: 7
    operator: '&'

  SLLI:
    format: I
    opcode: 19
    f3: 1
    operator: '<<'
    shamt: 0

  SRLI:
    format: I
    opcode: 19
    f3: 5
    operator: '>>'
    type:
    shamt: 0

  # SRAI:
    # format: I
    # opcode: 19
    # f3: 5
    # operator: '>>'
    # shamt: 16

  LB:
    format: I
    opcode: 3
    load: 8
    f3: 0
    operator: '+'

  LH:
    format: I
    opcode: 3
    load: 16
    f3: 1
    operator: '+'

  LW:
    format: I
    opcode: 3
    load: 32
    f3: 2
    operator: '+'

  LBU:
    format: I
    opcode: 3
    load: 8
    f3: 4
    operator: '+'

  LHU:
    format: I
    opcode: 3
    load: 16
    f3: 5
    operator: '+'

  ADD:
    format: R
    opcode: 51
    f3: 0
    f7: 0
    operator: '+'

  SUB:
    format: R
    opcode: 51
    f3: 0
    f7: 32
    operator: '-'

  SLL:
    format: R
    opcode: 51
    f3: 1
    f7: 0
    operator: '<<'
    type: uint64_t

  SLT:
    format: R
    opcode: 51
    f3: 2
    f7: 0
    operator: '<'
    afterop: ' ? 1 : 0'

  SLTU:
    format: R
    opcode: 51
    f3: 3
    f7: 0
    operator: '<'
    afterop: ' ? 1 : 0'
    type: uint64_t

  XOR:
    format: R
    opcode: 51
    f3: 4
    f7: 0
    operator: '^'

  SRL:
    format: R
    opcode: 51
    f3: 5
    f7: 0
    operator: '>>'
    type: uint64_t

  SRA:
    format: R
    opcode: 51
    f3: 5
    f7: 32
    operator: '>>'

  OR:
    format: R
    opcode: 51
    f3: 6
    f7: 0
    operator: '|'

  AND:
    format: R
    opcode: 51
    f3: 7
    f7: 0
    operator: '&'

  SB:
    format: S
    opcode: 35
    f3: 0
    store: 8

  SH:
    format: S
    opcode: 35
    f3: 1
    store: 16

  SW:
    format: S
    opcode: 35
    f3: 2
    store: 32

  JAL:
    format: J
    opcode: 111
    log: jump and link
    BBend: "true"

  JALR:
    format: I
    opcode: 103
    f3: 0
    BBend: "true"

  BEQ:
    format: B
    opcode: 99
    f3: 0
    operator: '=='
    BBend: "true"

  BNE:
    format: B
    opcode: 99
    f3: 1
    operator: '!='
    BBend: "true"

  BLT:
    format: B
    opcode: 99
    f3: 4
    operator: '<'
    BBend: "true"

  BGE:
    format: B
    opcode: 99
    f3: 5
    operator: '>='
    BBend: "true"

  BLTU:
    format: B
    opcode: 99
    f3: 6
    type: uint64_t
    operator: '<'
    BBend: "true"

  BGEU:
    format: B
    opcode: 99
    f3: 7
    type: uint64_t
    operator: '>='
    BBend: "true"

  # FENCE:
  #   format:

  # FENCE.I:
  #   format:

  # CSRRW:
  #   format:

  # CSRRS:
  #   format:

  # CSRRC:
  #   format:

  # CSRRWI:
  #   format:

  # CSRRSI:
  #   format:

  # CSRRCI:
  #   format:

  # ECALL:
  #   format:

  # EBREAK:
  #   format:

  URET:
    format: SYSTEM
    opcode: 115
    rd: 0
    f3: 0
    rs1: 0
    f12: 2
    BBend: "true"

  SRET:
    format: SYSTEM
    opcode: 115
    rd: 0
    f3: 0
    rs1: 0
    f12: 258
    BBend: "true"

  MRET:
    format: SYSTEM
    opcode: 115
    rd: 0
    f3: 0
    rs1: 0
    f12: 770
    BBend: "true"

  # WFI:
  #   format:

  # SFENCE.VMA:
  #   format:

  ADDIW:
    format: I
    opcode: 27
    f3: 0
    operator: '+'
    mask: ' & 0b11111111111111111111111111111111'

  SLLIW:
    format: I
    opcode: 27
    f3: 1
    operator: '<<'
    shamt: 0
    mask: ' & 0b11111111111111111111111111111111U'

  SRLIW:
    format: I
    opcode: 27
    operator: '>>'
    f3: 5
    shamt: 0
    type: uint64_t
    mask: ' & 0b11111111111111111111111111111111U'

  # SRAIW:
  #   format: I
  #   opcode: 27
  #   operator: '>>'
  #   f3: 5
  #   shamt: 32

  ADDW:
    format: R
    opcode: 59
    operator: '+'
    mask: ' & 0b11111111111111111111111111111111U'
    f3: 0
    f7: 0

  SUBW:
    format: R
    opcode: 59
    operator: '-'
    mask: ' & 0b11111111111111111111111111111111U'
    f3: 0
    f7: 32

  SLLW:
    format: R
    opcode: 59
    operator: '<<'
    f3: 1
    f7: 0

  SRLW:
    format: R
    opcode: 59
    operator: '>>'
    f3: 5
    f7: 0
    type: uint64_t

  SRAW:
    format: R
    opcode: 59
    operator: '>>'
    f3: 5
    f7: 32

  LWU:
    format: I
    opcode: 3
    operator: '+'
    f3: 6
    load: 32

  LD:
    format: I
    opcode: 3
    operator: '+'
    f3: 3
    load: 64

  SD:
    format: S
    opcode: 35
    f3: 3
    store: 64

  MUL:
    format: M
    opcode: 51
    f3: 0
    f7: 1
    lower: 64
    operator: '*'

  MULH:
    format: M
    opcode: 51
    f3: 1
    f7: 1
    upper: 64
    operator: '*'

  MULHSU:
    format: M
    opcode: 51
    f3: 2
    f7: 1
    upper: 64
    rs2: uint64_t
    operator: '*'

  MULHU:
    format: M
    opcode: 51
    f3: 3
    f7: 1
    upper: 64
    rs1: uint64_t
    rs2: uint64_t
    operator: '*'

  DIV:
    format: M
    opcode: 51
    lower: 32
    f3: 4
    f7: 1
    operator: '/'

  DIVU:
    format: M
    opcode: 51
    f3: 5
    f7: 1
    rs1: uint64_t
    rs2: uint64_t
    lower: 32
    operator: '/'

  REM:
    format: M
    opcode: 51
    f3: 6
    f7: 1
    operator: '%'

  REMU:
    format: M
    opcode: 51
    f3: 7
    f7: 1
    operator: '%'
    rs1: uint64_t
    rs2: uint64_t

  MULW:
    format: M
    opcode: 59
    f3: 0
    f7: 1
    lower: 32
    operator: '*'

  DIVW:
    format: M
    opcode: 59
    f3: 4
    f7: 1
    operator: '/'
    size1: [32, 0]
    size2: [32, 0]

  DIVUW:
    format: M
    opcode: 59
    f3: 5
    f7: 1
    operator: '/'
    size1: [32, 0]
    size2: [32, 0]
    rs1: uint64_t
    rs2: uint64_t

  REMW:
    format: M
    opcode: 59
    f3: 6
    f7: 1
    operator: '%'
    size1: [32, 0]
    size2: [32, 0]

  REMUW:
    format: M
    opcode: 59
    f3: 7
    f7: 1
    operator: '%'
    size1: [32, 0]
    size2: [32, 0]
    rs1: uint64_t
    rs2: uint64_t